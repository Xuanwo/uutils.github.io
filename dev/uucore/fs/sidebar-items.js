initSidebarItems({"enum":[["MissingHandling","Controls how symbolic links should be handled when canonicalizing a path."],["ResolveMode","Controls when symbolic links are resolved"]],"fn":[["canonicalize","Return the canonical, absolute form of a path."],["dir_strip_dot_for_creation","For some programs like install or mkdir, dir/. can be provided Special case to match GNU’s behavior: install -d foo/. should work and just create foo/ std::fs::create_dir(“foo/.”); fails in pure Rust"],["display_permissions","Display the permissions of a file On non unix like system, just show ‘–––––’"],["display_permissions_unix","Display the permissions of a file on a unix like system"],["infos_refer_to_same_file","Checks if `p1` and `p2` are the same file information. If error happens when trying to get files’ metadata, returns false"],["is_symlink","Decide whether the given path is a symbolic link."],["make_path_relative_to","Converts absolute `path` to be relative to absolute `to` path."],["normalize_path","Normalize a path by removing relative information For example, convert ‘bar/../foo/bar.txt’ => ‘foo/bar.txt’ copied from `<https://github.com/rust-lang/cargo/blob/2e4cfc2b7d43328b207879228a2ca7d427d188bb/src/cargo/util/paths.rs#L65-L90>` both projects are MIT `<https://github.com/rust-lang/cargo/blob/master/LICENSE-MIT>` for std impl progress see rfc `<https://github.com/rust-lang/rfcs/issues/2208>` replace this once that lands"],["paths_refer_to_same_file","Checks if `p1` and `p2` are the same file. If error happens when trying to get files’ metadata, returns false"],["resolve_relative_path","resolve a relative path"]],"macro":[["has",""]],"struct":[["FileInformation","Information to uniquely identify a file"]]});