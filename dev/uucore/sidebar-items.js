initSidebarItems({"attr":[["main",""]],"enum":[["ConversionResult",""],["InvalidEncodingHandling",""]],"externcrate":[["libc",""]],"fn":[["args_os",""],["execution_phrase","Derive the complete execution phrase for “usage”."],["format_usage","Generate the usage string for clap."],["get_utility_is_second_arg",""],["set_utility_is_second_arg",""],["util_name","Derive the utility name."]],"macro":[["bin",""],["crash","Display an error and [`std::process::exit`]"],["crash_if_err","Unwrap a [`std::result::Result`], crashing instead of panicking."],["has",""],["show","Display a [`crate::error::UError`] and set global exit code."],["show_error","Show an error to stderr in a similar style to GNU coreutils."],["show_error_custom_description","Show a warning to stderr in a similar style to GNU coreutils."],["show_if_err","Display an error and set global exit code in error case."],["show_usage_error","Show a bad invocation help message in a similar style to GNU coreutils."],["show_warning","Print a warning message to stderr."],["uio_error","Shorthand to construct [`UIoError`]-instances."]],"mod":[["backup_control","Implement GNU-style backup functionality."],["display",""],["encoding",""],["entries","Get password/group file entry"],["error","All utils return exit with an exit code. Usually, the following scheme is used:"],["fs","Set of functions to manage files and symlinks"],["fsext","Set of functions to manage file systems"],["lines","Iterate over lines, including the line ending character(s)."],["memo","Memo runner of printf Takes a format string and arguments"],["mode","Set of functions to parse modes"],["os",""],["panic","Custom panic hooks that allow silencing certain types of errors."],["parse_size",""],["parse_time","Parsing a duration from a string."],["perms","Common functions to manage permissions"],["pipes",""],["process","Set of functions to manage IDs"],["ranges",""],["ringbuffer","A fixed-size ring buffer."],["signals",""],["utmpx","Aims to provide platform-independent methods to obtain login records"],["version_cmp",""]],"trait":[["Args",""]]});